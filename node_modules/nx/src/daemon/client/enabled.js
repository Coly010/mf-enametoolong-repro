"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDaemonEnabled = isDaemonEnabled;
const nx_json_1 = require("../../config/nx-json");
const node_fs_1 = require("node:fs");
const is_ci_1 = require("../../utils/is-ci");
const workspace_root_1 = require("../../utils/workspace-root");
const tmp_dir_1 = require("../tmp-dir");
let _enabled;
function isDaemonEnabled(nxJson = (0, nx_json_1.readNxJson)()) {
    if (_enabled === undefined) {
        const useDaemonProcessOption = nxJson?.useDaemonProcess;
        const env = process.env.NX_DAEMON;
        // env takes precedence
        // option=true,env=false => no daemon
        // option=false,env=undefined => no daemon
        // option=false,env=false => no daemon
        // option=undefined,env=undefined => daemon
        // option=true,env=true => daemon
        // option=false,env=true => daemon
        // CI=true,env=undefined => no daemon
        // CI=true,env=false => no daemon
        // CI=true,env=true => daemon
        // docker=true,env=undefined => no daemon
        // docker=true,env=false => no daemon
        // docker=true,env=true => daemon
        // WASM => no daemon because file watching does not work
        if ((((0, is_ci_1.isCI)() || isDocker()) && env !== 'true') ||
            (0, tmp_dir_1.isDaemonDisabled)() ||
            nxJsonIsNotPresent() ||
            (useDaemonProcessOption === undefined && env === 'false') ||
            (useDaemonProcessOption === true && env === 'false') ||
            (useDaemonProcessOption === false && env === undefined) ||
            (useDaemonProcessOption === false && env === 'false')) {
            _enabled = false;
        }
        else if (require('../../native').IS_WASM) {
            require('../../utils/output').output.warn({
                title: 'The Nx Daemon is unsupported in WebAssembly environments. Some things may be slower than or not function as expected.',
            });
            _enabled = false;
        }
        else {
            _enabled = true;
        }
    }
    return _enabled;
}
function isDocker() {
    try {
        (0, node_fs_1.statSync)('/.dockerenv');
        return true;
    }
    catch {
        try {
            return (0, node_fs_1.readFileSync)('/proc/self/cgroup', 'utf8')?.includes('docker');
        }
        catch { }
        return false;
    }
}
function nxJsonIsNotPresent() {
    return !(0, nx_json_1.hasNxJson)(workspace_root_1.workspaceRoot);
}
